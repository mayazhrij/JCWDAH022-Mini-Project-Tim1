// File: prisma/schema.prisma

// ----------------------------------------------------------------------------------
// Skema Database berdasarkan "Sheet 1" (Jasmine.csv)
// ----------------------------------------------------------------------------------

// File: prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
  output   = "../../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(uuid())
  email               String               @unique
  passwordHash        String               @map("password_hash")
  name                String?
  profilePicture      String?              @map("profile_picture")
  role                Role                 @default(customer)
  referralCode        String               @unique @map("referral_code")
  referredById        String?              @map("referred_by_id")
  points              Int                  @default(0)
  referredBy          User?                @relation("referrals", fields: [referredById], references: [id])
  referrals           User[]               @relation("referrals")
  pointHistory        Point[]
  coupons             Coupon[]
  passwordResetTokens PasswordResetToken[]
  organizedEvents     Event[]              @relation("UserEvents")
  reviews             Review[]
  transactions        Transaction[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

enum Role {
  customer
  organizer
}

model Point {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  amount    Int
  reason    String? // Alasan pemberian/pengurangan point (referral, penggunaan, dll)
  isActive  Boolean  @default(true) // Untuk penanda aktif/expired
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([expiresAt])
  @@map("points")
}

model Coupon {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  code      String   @unique
  discount  Int
  isUsed    Boolean  @default(false) @map("is_used")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([expiresAt])
  @@map("coupons")
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  used      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([expiresAt])
  @@map("password_reset_tokens")
}

// Jasmine models

// Global ENUM untuk status transaksi
enum TransactionStatus {
  waiting_payment
  waiting_confirmation
  done
  rejected
  expired
  canceled
}

model Event {
  id             String   @id @default(uuid())
  organizerId    String   @map("organizer_id")
  name           String
  description    String?
  category       String // NOTE: Sebaiknya ini adalah FK ke Category Model
  location       String // NOTE: Sebaiknya ini adalah FK ke Location Model
  startDate      DateTime @map("start_date")
  endDate        DateTime @map("end_date")
  priceIdr       Int      @default(0) @map("price_idr")
  availableSeats Int      @default(0) @map("available_seats")

  // Relationships
  organizer    User          @relation("UserEvents", fields: [organizerId], references: [id])
  ticketTypes  TicketType[]
  promotions   Promotion[]
  transactions Transaction[]
  reviews      Review[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("events")
}

model TicketType {
  id          String @id @default(uuid())
  eventId     String @map("event_id")
  ticketName  String @map("ticket_name")
  ticketPrice Int    @map("ticket_price")
  quota       Int

  // Relationships
  event        Event         @relation(fields: [eventId], references: [id])
  transactions Transaction[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("ticket_types")
}

model Promotion {
  id          String   @id @default(uuid())
  eventId     String   @map("event_id")
  title       String
  description String?
  startDate   DateTime @map("start_date")
  endDate     DateTime @map("end_date")

  // Relationships
  event Event @relation(fields: [eventId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("promotions")
}

model Transaction {
  id           String            @id @default(uuid())
  userId       String            @map("user_id")
  eventId      String            @map("event_id")
  ticketTypeId String            @map("ticket_id") // Diubah dari ticket_id menjadi ticketTypeId untuk konsistensi
  quantity     Int
  totalPrice   Int               @map("total_price")
  status       TransactionStatus // Menggunakan ENUM baru
  paymentProof String?           @map("payment_proof") // Boleh null jika belum diupload

  // Relationships
  user        User         @relation(fields: [userId], references: [id])
  event       Event        @relation(fields: [eventId], references: [id])
  ticketType  TicketType   @relation(fields: [ticketTypeId], references: [id])
  pointsUsage PointsUsage? // Relasi 1:1 atau 1:N (dibuat 1:1 untuk kesederhanaan)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("transactions")
}

model PointsUsage {
  id             String @id @default(uuid())
  transactionId  String @unique @map("transaction_id") // Unique karena 1 transaksi hanya 1x pakai poin
  usedPoints     Int    @map("used_points")
  deductedAmount Int    @map("deducted_amount")

  // Relationships
  transaction Transaction @relation(fields: [transactionId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("points_usage")
}

model Review {
  id      String  @id @default(uuid())
  userId  String  @map("user_id")
  eventId String  @map("event_id")
  rating  Int
  comment String?

  // Relationships
  user  User  @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id])

  @@map("reviews")
}