generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_PRISMA")
}

model User {
  id                  String               @id @default(uuid())
  email               String               @unique
  passwordHash        String               @map("password_hash")
  name                String?
  profilePicture      String?              @map("profile_picture")
  role                Role                 @default(customer)
  referralCode        String               @unique @map("referral_code")
  referredById        String?              @map("referred_by_id")
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  points              Int                  @default(0)
  coupons             Coupon[]
  organizedEvents     Event[]              @relation("UserEvents")
  passwordResetTokens PasswordResetToken[]
  pointHistory        Point[]
  reviews             Review[]
  transactions        Transaction[]
  referredBy          User?                @relation("referrals", fields: [referredById], references: [id])
  referrals           User[]               @relation("referrals")

  @@map("users")
}

model Point {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  amount    Int
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  isActive  Boolean  @default(true)
  reason    String?
  user      User     @relation(fields: [userId], references: [id])

  @@index([expiresAt])
  @@map("points")
}

model Coupon {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  code      String   @unique
  discount  Int
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  isUsed    Boolean  @default(false) @map("is_used")
  user      User     @relation(fields: [userId], references: [id])

  @@index([expiresAt])
  @@map("coupons")
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  used      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id])

  @@index([expiresAt])
  @@map("password_reset_tokens")
}

model Event {
  id             String        @id @default(uuid())
  organizerId    String        @map("organizer_id")
  name           String
  description    String?
  category       String
  location       String
  startDate      DateTime      @map("start_date")
  endDate        DateTime      @map("end_date")
  priceIdr       Int           @default(0) @map("price_idr")
  availableSeats Int           @default(0) @map("available_seats")
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  organizer      User          @relation("UserEvents", fields: [organizerId], references: [id])
  promotions     Promotion[]
  reviews        Review[]
  ticketTypes    TicketType[]
  transactions   Transaction[]

  @@map("events")
}

model TicketType {
  id           String        @id @default(uuid())
  eventId      String        @map("event_id")
  ticketName   String        @map("ticket_name")
  ticketPrice  Int           @map("ticket_price")
  quota        Int
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  event        Event         @relation(fields: [eventId], references: [id])
  transactions Transaction[]

  @@map("ticket_types")
}

model Promotion {
  id          String   @id @default(uuid())
  eventId     String   @map("event_id")
  title       String
  description String?
  startDate   DateTime @map("start_date")
  endDate     DateTime @map("end_date")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  event       Event    @relation(fields: [eventId], references: [id])

  @@map("promotions")
}

model Transaction {
  id           String            @id @default(uuid())
  userId       String            @map("user_id")
  eventId      String            @map("event_id")
  ticketTypeId String            @map("ticket_id")
  quantity     Int
  totalPrice   Int               @map("total_price")
  status       TransactionStatus
  paymentProof String?           @map("payment_proof")
  createdAt    DateTime          @default(now()) @map("created_at")
  updatedAt    DateTime          @updatedAt @map("updated_at")
  pointsUsage  PointsUsage?
  event        Event             @relation(fields: [eventId], references: [id])
  ticketType   TicketType        @relation(fields: [ticketTypeId], references: [id])
  user         User              @relation(fields: [userId], references: [id])

  @@map("transactions")
}

model PointsUsage {
  id             String      @id @default(uuid())
  transactionId  String      @unique @map("transaction_id")
  usedPoints     Int         @map("used_points")
  deductedAmount Int         @map("deducted_amount")
  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @updatedAt @map("updated_at")
  transaction    Transaction @relation(fields: [transactionId], references: [id])

  @@map("points_usage")
}

model Review {
  id      String  @id @default(uuid())
  userId  String  @map("user_id")
  eventId String  @map("event_id")
  rating  Int
  comment String?
  event   Event   @relation(fields: [eventId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@map("reviews")
}

enum Role {
  customer
  organizer
}

enum TransactionStatus {
  waiting_payment
  waiting_confirmation
  done
  rejected
  expired
  canceled
}
